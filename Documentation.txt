# Authentication Application Documentation

## Overview
This document outlines the setup and functionality of an authentication system that includes user registration, login, email verification, and password reset capabilities. The project is built using Node.js, Express, MongoDB, and React for the backend and frontend respectively.

---

## Backend Setup

### 1. Initialization
1. Initialize the Node.js project:
   ```bash
   npm init
   ```
2. Install required dependencies:
   ```bash
   npm i express cors dotenv nodemon jsonwebtoken mongoose bcryptjs nodemailer cookie-parser
   ```
3. Update the `package.json` file to include:
   ```json
   "type": "module",
   "scripts": {
     "start": "node server.js",
     "server": "nodemon server.js"
   }
   ```

### 2. MongoDB Setup
1. Use the provided MongoDB URI:
   ```
   mongodb+srv://yuvarajkrishnan:<db_password>@cluster0.phf7w.mongodb.net/
   ```
2. Create a `mongodb.js` file in the `config` folder to connect the database to the application using a `connectDB()` function.
3. Integrate the database connection in `server.js`.

### 3. Models
Create a `userModel.js` file to define the `User` schema:
- Include fields for all user input data.
- Use this model to store and interact with user data in the MongoDB database.

### 4. Controllers
#### User Registration
1. Validate input fields and check for missing data.
2. Check if the email already exists in the database.
3. Hash the password using `bcryptjs` with a salt round of 10.
4. Create a new user object and save it to the database.
5. Generate a JWT token and send it as a secure HTTP-only cookie.

#### User Login
1. Validate input credentials.
2. Check if the email exists in the database.
3. Compare the provided password with the hashed password stored in the database.
4. Generate and send a JWT token as an HTTP-only cookie.

#### Additional Features
- **Logout**: Clears the JWT cookie.
- **Email Verification**: Send and verify OTP for email verification using `nodemailer`.
- **Password Reset**: Send OTP for password reset and allow users to update their password.

### 5. Routes
1. **`authRoutes.js`**: Handles endpoints for:
   - Register
   - Login
   - Logout
   - Email verification
   - Password reset
2. **`userRoutes.js`**: Provides endpoints to fetch user details and other user-related information.

### 6. Configuration
- **Nodemailer**: Used to send emails for verification and password reset.
- **Environment Variables**: Store sensitive data like `JWT_SECRET` and MongoDB URI in a `.env` file.

---

## Frontend Setup

### 1. Initialization
1. Create a new React project:
   ```bash
   npm create vite@latest
   ```
2. Install dependencies:
   ```bash
   npm install
   npm install axios react-router-dom react-toastify
   ```
3. Start the development server:
   ```bash
   npm run dev
   ```

### 2. Tailwind CSS
- Follow Tailwind CSS setup steps to style the frontend application.

---

## Features

### Backend Features
- **User Registration**: Securely store user data and passwords.
- **User Login**: Authenticate users and provide secure JWT tokens.
- **Email Verification**: Send OTP for email verification.
- **Password Reset**: Send and validate OTP for resetting passwords.
- **Secure Cookie Handling**: Use HTTP-only cookies to store JWT tokens securely.

### Frontend Features
- **User Interface**: Built with React and styled using Tailwind CSS.
- **Routing**: Implemented using `react-router-dom`.
- **Notifications**: User notifications with `react-toastify`.
- **API Integration**: Communicate with the backend using `axios`.

---

## Folder Structure
```
├── backend
│   ├── config
│   │   └── mongodb.js
│   ├── controllers
│   │   ├── authController.js
│   │   └── userController.js
│   ├── models
│   │   └── userModel.js
│   ├── routes
│   │   ├── authRoutes.js
│   │   └── userRoutes.js
│   └── server.js
├── frontend
│   ├── src
│   │   ├── components
│   │   ├── pages
│   │   └── App.js
│   └── public
└── README.md
```

---

## Running the Application

### Backend
1. Start the server:
   ```bash
   npm run server
   ```
2. Ensure MongoDB is running and connected.

### Frontend
1. Start the frontend:
   ```bash
   npm run dev
   ```

---

## Key Libraries
- **express**: Web framework for Node.js.
- **cors**: Enable cross-origin resource sharing.
- **dotenv**: Manage environment variables.
- **jsonwebtoken**: Generate and verify JWTs.
- **mongoose**: Object Data Modeling (ODM) library for MongoDB.
- **bcryptjs**: Securely hash and compare passwords.
- **nodemailer**: Send emails for verification and password reset.
- **cookie-parser**: Parse HTTP request cookies.

---

## Notes
1. Replace `<db_password>` in the MongoDB URI with the actual password.
2. Ensure `.env` file is properly configured with `JWT_SECRET` and MongoDB credentials.
3. Test all endpoints using tools like Postman to ensure functionality.

---
